var Bourne, Suggestions, _, async , products;

_ = require('underscore');

async = require('async');

Bourne = require('bourne');

products = require('./../../data/products.json');

//compute the suggestions
module.exports = Suggestions = (function() {
  function Suggestions(engine) {
    this.engine = engine;
    this.db = new Bourne('./db-suggestions.json');
  }

  Suggestions.prototype.forUser = function(username, done) {
    return this.db.findOne({
      username: username
    }, function(err, arg) {
      var suggestions;
      suggestions = (arg != null ? arg : {
        suggestion: []
      }).suggestions;
      if (err != null) {
        return done(err);
      }
      return done(null, suggestions);
    });
  };

  Suggestions.prototype.update = function(username, done) {
    return this.engine.similars.byUser(username, (function(_this) {
      return function(err, others) {
        if (err != null) {
          return done(err);
        }
        return async.auto({
          likes: function(done) {
            return _this.engine.likes.itemsByUser(username, done);
          },
          dislikes: function(done) {
            return _this.engine.dislikes.itemsByUser(username, done);
          },
          products: function(done) {
            return async.map(others, function(other, done) {
              return async.map([_this.engine.likes, _this.engine.dislikes], function(rater, done) {
                return rater.itemsByUser(other.username, done);
              }, done);
            }, done);
          }
        }, function(err, arg) {
          var dislikes, products, likes;
          likes = arg.likes, dislikes = arg.dislikes, products = arg.products;
          if (err != null) {
            return done(err);
          }
          products = _.difference(_.unique(_.flatten(products)), likes, dislikes);
          return _this.db["delete"]({
            username: username
          }, function(err) {
            if (err != null) {
              return done(err);
            }
            return async.map(products, function(product, done) {
              return async.auto({
                likers: function(done) {
                  return _this.engine.likes.usersByItem(product, done);
                },
                dislikers: function(done) {
                  return _this.engine.dislikes.usersByItem(product, done);
                }
              }, function(err, arg1) {
                var dislikers, i, len, likers, numerator, other, ref ,helper, price;
                likers = arg1.likers, dislikers = arg1.dislikers;
                if (err != null) {
                  return done(err);
                }
                  
                helper = _.findWhere(products, {imgName: product});
                console.log(product);
                numerator = 0;
                ref = _.without(_.flatten([likers, dislikers]), username);
                for (i = 0, len = ref.length; i < len; i++) {
                  other = ref[i];
                  other = _.findWhere(others, {
                    username: other
                  });
                  if (other != null) {
                    numerator += other.similarity;
                  }
                }
                return done(null, {
                  product: product,
                  category : helper.category,
                  name : helper.name,
                  price : helper.price,
                  weight: numerator / _.union(likers, dislikers).length
                });
              });
            }, function(err, suggestions) {
              if (err != null) {
                return done(err);
              }
              return _this.db.insert({
                username: username,
                suggestions: suggestions
              }, done);
            });
          });
        });
      };
    })(this));
  };

  return Suggestions;

})();

// ---
// generated by coffee-script 1.9.2